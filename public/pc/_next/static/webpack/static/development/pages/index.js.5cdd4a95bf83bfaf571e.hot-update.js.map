{"version":3,"file":"static/webpack/static\\development\\pages\\index.js.5cdd4a95bf83bfaf571e.hot-update.js","sources":["webpack:///./components/List/index.jsx"],"sourcesContent":["import React, { useContext, useMemo } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Router from \"next/router\";\r\nimport { fixedZero, inThisWeek } from \"../../utils/util\";\r\nimport { ColorContext } from \"../Context\";\r\nimport IconFont from \"../IconFont\";\r\nimport moment from \"moment\";\r\nimport { Empty } from \"antd\";\r\n\r\nconst Wrapper = styled.div`\r\n  margin-bottom: 40px;\r\n  display: grid;\r\n  grid-gap: 40px 20px;\r\n  grid-template-columns: repeat(4, calc((100% - 60px) / 4));\r\n\r\n  @media (min-width: 768px) {\r\n    grid-template-columns: repeat(4, calc((100% - 60px) / 4));\r\n  }\r\n\r\n  @media (min-width: 992px) {\r\n    grid-template-columns: repeat(5, calc((100% - 80px) / 5));\r\n  }\r\n\r\n  @media (min-width: 1200px) {\r\n    grid-template-columns: repeat(6, calc((100% - 100px) / 6));\r\n  }\r\n\r\n  @media (min-width: 1600px) {\r\n    grid-template-columns: repeat(8, calc((100% - 140px) / 8));\r\n  }\r\n\r\n  .top {\r\n    height: 0;\r\n    padding-top: 140%;\r\n    background-color: rgba(0, 0, 0, 0.1);\r\n    background-size: cover;\r\n    background-position: center;\r\n    border-radius: 6px;\r\n    vertical-align: bottom;\r\n    position: relative;\r\n    cursor: pointer;\r\n\r\n    span {\r\n      display: block;\r\n      width: 100%;\r\n      height: 30px;\r\n      line-height: 30px;\r\n      overflow: hidden;\r\n      text-overflow: ellipsis;\r\n      white-space: nowrap;\r\n      text-align: center;\r\n    }\r\n\r\n    .update {\r\n      position: absolute;\r\n      right: 0;\r\n      top: 0;\r\n      padding: 3px 10px;\r\n      color: white;\r\n      background-color: rgba(0, 0, 0, 0.5);\r\n      border-radius: 0 4px 0 4px;\r\n\r\n      &.active {\r\n        background-color: rgb(242, 93, 142);\r\n      }\r\n    }\r\n\r\n    .rate {\r\n      position: absolute;\r\n      left: -5px;\r\n      top: 5px;\r\n      padding: 1px 15px;\r\n      min-width: 30px;\r\n      color: white;\r\n      background-color: rgba(0, 0, 0, 0.7);\r\n      border-radius: 0 2px 2px 0;\r\n    }\r\n  }\r\n`;\r\n\r\nconst goAnimate = (type, slug) => {\r\n  Router.push(`/${type}/slug/${slug}`);\r\n};\r\n\r\nconst reactComponent = props => {\r\n  const { list, type, update = false, status = false } = props;\r\n\r\n  return (\r\n    <>\r\n      {list.length === 0 ? (\r\n        <Empty style={{ margin: \"30px 0\" }} description={false} />\r\n      ) : (\r\n        <Wrapper>\r\n          {list.map(item => (\r\n            <div\r\n              className=\"top\"\r\n              style={{ backgroundImage: `url(${item.coverVertical})` }}\r\n              onClick={() => {\r\n                goAnimate(type, item.slug);\r\n              }}\r\n              key={item._id}\r\n            >\r\n              <span>{item.title}</span>\r\n              {update && (\r\n                <div\r\n                  className={\r\n                    inThisWeek(item.updatedAt) ? \"update active\" : \"update\"\r\n                  }\r\n                >\r\n                  {fixedZero(item.countEposide)}\r\n                </div>\r\n              )}\r\n\r\n              <div className=\"rate\">{item.countStar}</div>\r\n            </div>\r\n          ))}\r\n        </Wrapper>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nconst Wrapper2 = styled.div`\r\n  .list {\r\n    margin-top: 20px;\r\n    height: 260px;\r\n    border-radius: 5px;\r\n    box-shadow: 0 0 16px rgba(0, 0, 0, 0.2);\r\n    display: grid;\r\n    grid-template-columns: 190px 1fr 190px;\r\n    overflow: hidden;\r\n\r\n    .img {\r\n      background-color: rgba(0, 0, 0, 0.1);\r\n      background-size: cover;\r\n      border-radius: 5px;\r\n    }\r\n\r\n    .content {\r\n      padding: 15px;\r\n\r\n      .title {\r\n        line-height: 40px;\r\n        font-size: 26px;\r\n        color: black;\r\n        cursor: pointer;\r\n\r\n        &:hover {\r\n          color: ${props => props.color};\r\n        }\r\n      }\r\n\r\n      .info {\r\n        line-height: 25px;\r\n        display: flex;\r\n        justify-content: flex-start;\r\n        align-items: center;\r\n\r\n        span {\r\n          display: flex;\r\n          justify-content: flex-start;\r\n          align-items: center;\r\n          margin-right: 30px;\r\n\r\n          i {\r\n            font-size: 12px;\r\n            opacity: 0.6;\r\n            margin-right: 5px;\r\n          }\r\n          &:nth-child(2) i,\r\n          &:nth-child(3) i,\r\n          &:nth-child(4) i {\r\n            font-size: 15px;\r\n          }\r\n        }\r\n      }\r\n\r\n      .tags {\r\n        height: 25px;\r\n        text-overflow: ellipsis;\r\n        white-space: nowrap;\r\n        overflow: hidden;\r\n        font-size: 14px;\r\n        color: rgba(0, 0, 0, 0.6);\r\n\r\n        span {\r\n          margin-right: 8px;\r\n        }\r\n      }\r\n\r\n      .introduce {\r\n        height: 140px;\r\n        line-height: 20px;\r\n        opacity: 0.8;\r\n      }\r\n    }\r\n\r\n    .rate {\r\n      background-color: rgba(0, 0, 0, 0.2);\r\n      display: flex;\r\n      flex-direction: column;\r\n      justify-content: flex-start;\r\n      align-items: center;\r\n      padding: 15px;\r\n\r\n      .title {\r\n        width: 100%;\r\n        height: 40px;\r\n        display: flex;\r\n        justify-content: space-between;\r\n\r\n        span:nth-child(1) {\r\n          font-size: 1.2em;\r\n          color: white;\r\n        }\r\n      }\r\n\r\n      .star {\r\n        font-size: 80px;\r\n        font-weight: solid;\r\n        height: 160px;\r\n        line-height: 160px;\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const ListInfo = props => {\r\n  const { list, type } = props;\r\n  const value = useContext(ColorContext);\r\n  const color = useMemo(() => value, [value]);\r\n\r\n  return (\r\n    <>\r\n      {list.length === 0 ? (\r\n        <Empty style={{ margin: \"15px 0 \" }} />\r\n      ) : (\r\n        <Wrapper2 color={color}>\r\n          {list.map(item => (\r\n            <div className=\"list\" key={item._id}>\r\n              <div\r\n                className=\"img\"\r\n                style={{ backgroundImage: `url(${item.coverVertical})` }}\r\n              />\r\n              <div className=\"content\">\r\n                <div\r\n                  className=\"title\"\r\n                  onClick={() => {\r\n                    goAnimate(type, item.slug);\r\n                  }}\r\n                >\r\n                  {item.title}\r\n                </div>\r\n                <div className=\"info\">\r\n                  <span>\r\n                    <IconFont type=\"icon-icon-time\" />\r\n                    {moment(item.information.firstPlay).format(\"YYYY-MM-DD\")}\r\n                  </span>\r\n                  <span>\r\n                    <IconFont type=\"icon-dianshiyouxiandianshishuzidianshimianxing\" />\r\n                    {item.information.eposideCount}\r\n                  </span>\r\n\r\n                  <span>\r\n                    <IconFont type=\"icon-youtube\" />\r\n                    {item.count.play}\r\n                  </span>\r\n\r\n                  <span>\r\n                    <IconFont type=\"icon-yizhuifan\" />\r\n                    {item.count.like}\r\n                  </span>\r\n                  <span>\r\n                    <IconFont type=\"icon-comment\" />\r\n                    {item.count.comment}\r\n                  </span>\r\n                </div>\r\n                <div className=\"tags\">\r\n                  <span>{formatMessage({ id: \"list.information.tags\" })}:</span>\r\n                  {item.category.tag.map(ele => (\r\n                    <span>{ele}</span>\r\n                  ))}\r\n                </div>\r\n                <div className=\"introduce\">\r\n                  <p>\r\n                    {formatMessage({ id: \"list.information.introduce\" })}:{\" \"}\r\n                    {item.information.introduce}\r\n                  </p>\r\n                </div>\r\n              </div>\r\n              <div className=\"rate\">\r\n                <div className=\"title\">\r\n                  <span>\r\n                    {formatMessage({ id: \"list.information.rateStar\" })}:\r\n                  </span>\r\n                  <span>\r\n                    {formatMessage({ id: \"list.information.rateCount\" })}:\r\n                    {item.information.rateCount}\r\n                  </span>\r\n                </div>\r\n\r\n                <div className=\"star\">\r\n                  <span>{item.information.rateStar}</span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </Wrapper2>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default reactComponent;\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAAA;AAAA;AAAA;AACA;AAsEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AApBA;AA2BA;AACA;AACA;AAAA;AAAA;AAAA;AA0BA;AAAA;AA+EA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAEA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAhEA;AAyEA;AAEA;;;;A","sourceRoot":""}