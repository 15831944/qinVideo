{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport moment from \"moment\";\nexport const hexToRgb = (hex, opacity) => {\n  const rgb = [];\n  hex = hex.substr(1);\n\n  if (hex.length === 3) {\n    hex = hex.replace(/(.)/g, \"$1$1\");\n  }\n\n  hex.replace(/../g, function (color) {\n    rgb.push(_parseInt(color, 0x10));\n  });\n  return `rgba(${rgb.join(\",\")},${opacity})`;\n};\nexport function fixedZero(val) {\n  return val * 1 < 10 ? `0${val}` : val;\n}\nconst indexLabel = {\n  newIndexPlayAnimate: \"播放最高\",\n  newIndexRateAnimate: \"评分最高\",\n  newIndexNewAnimate: \"新番连载\",\n  newIndexRandomAnimate: \"随机推荐\",\n  newIndexPlayComic: \"播放最高\",\n  newIndexRateComic: \"评分最高\",\n  newIndexNewComic: \"新漫连载\",\n  newIndexRandomComic: \"随机推荐\"\n};\nexport const indexInit = arr => {\n  return arr.map((item, key) => {\n    if (/new/.test(item)) {\n      const type = /Animate/.test(item) ? \"animate\" : \"comic\";\n      let icon;\n\n      if (/newIndexNew/.test(item)) {\n        icon = \"icon-xinpin\";\n      } else if (/newIndexRandom/.test(item)) {\n        icon = \"icon-three\";\n      } else if (/newIndexPlay/.test(item)) {\n        icon = \"icon-ic_movie_filter\";\n      } else if (/newIndexRate/.test(item)) {\n        icon = \"icon-huiyuan\";\n      }\n\n      return {\n        _id: item,\n        name: indexLabel[item],\n        status: \"custom\",\n        type,\n        icon\n      };\n    } else {\n      item = JSON.parse(item);\n      item.kind = item.type;\n\n      switch (item.type) {\n        case \"akind\":\n          item.type = \"animate\";\n          break;\n\n        case \"ckind\":\n          item.type = \"comic\";\n          break;\n\n        case \"pkind\":\n          item.type = \"post\";\n          break;\n\n        default:\n          break;\n      }\n\n      const iconArr = [\"icon-zhandouzuozhan\", \"icon-kafeibei\", \"icon-zhinengyouhua\", \"icon-yule\", \"icon-youxian\", \"icon-mudedi\", \"icon-kongdiao\"];\n      const icon = iconArr[key % 6];\n      return _objectSpread({}, item, {\n        status: \"normal\",\n        icon\n      });\n    }\n  });\n};\nexport const indexTrans = element => {\n  const id = element._id;\n  let query = {\n    size: 20,\n    page: 1,\n    sortBy: \"updatedAt\",\n    sortOrder: -1\n  };\n\n  if (element.status === \"normal\") {\n    const type = element.type === \"animate\" ? \"kind\" : element.type;\n    query[type] = id;\n  } else if (element.status === \"custom\") {\n    let newQuery = {};\n\n    if (/newIndexNew/.test(id)) {\n      newQuery = {\n        update: true,\n        size: 100\n      };\n    } else if (/newIndexRandom/.test(id)) {\n      newQuery = {\n        sortBy: \"introduce\"\n      };\n    } else if (/newIndexPlay/.test(id)) {\n      newQuery = {\n        sortBy: \"countPlay\"\n      };\n    } else if (/newIndexRate/.test(id)) {\n      newQuery = {\n        sortBy: \"countStar\"\n      };\n    }\n\n    query = _objectSpread({}, query, {}, newQuery);\n  }\n\n  return query;\n};\nexport const weekGroup = list => {\n  const week = {\n    day0: [],\n    day1: [],\n    day2: [],\n    day3: [],\n    day4: [],\n    day5: [],\n    day6: []\n  };\n  list.map(item => {\n    const day = item.updateDay;\n    week[`day${day}`].push(item);\n  });\n  return week;\n};\nexport const inThisWeek = time => {\n  const update = moment(time);\n  const now = new Date();\n  let day = now.getDay();\n  now.setHours(0);\n  now.setMinutes(0);\n  now.setSeconds(0);\n\n  if (day === 0) {\n    day = 6;\n  } else {\n    day -= 1;\n  }\n\n  const beginTime = now.getTime() - day * 1000 * 3600 * 24;\n  return update.valueOf() > beginTime;\n};","map":null,"metadata":{},"sourceType":"module"}