{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { stringify } from \"qs\";\nimport fetch from \"isomorphic-unfetch\";\n/**\n * Requests a URL, returning a promise.\n *\n * @param  {string} url       The URL we want to request\n * @param  {object} [option] The options we want to pass to \"fetch\"\n * @return {object}           An object containing either \"data\" or \"err\"\n */\n\nvar codeStatus = function codeStatus(res) {\n  if (res.code === 10000) {\n    return res.data;\n  }\n\n  return false;\n};\n\nvar urlInit = function urlInit(url, options, method) {\n  var link = url;\n  var result = {\n    method: method\n  };\n  var defaultHeader = {\n    Accept: \"application/json\",\n    \"Content-Type\": \"application/json; charset=utf-8\"\n  };\n  var params = options.params,\n      query = options.query,\n      data = options.data,\n      formData = options.formData,\n      headers = options.headers;\n  /* eslint-disable*/\n\n  if (params) {\n    _Object$keys(params).map(function (item) {\n      if (!params[item] && params[item] !== 0) delete params[item];\n    });\n\n    link = link.replace(/\\/:(\\w+)/gm, function (index) {\n      return \"/\".concat(params[\"\".concat(index.replace(/\\/:/g, \"\"))]);\n    });\n  }\n\n  if (query) {\n    _Object$keys(query).map(function (item) {\n      if (!query[item] && query[item] !== 0) delete query[item];\n    });\n\n    link += \"?\".concat(stringify(query));\n  }\n\n  if (data) {\n    var newData = data;\n\n    _Object$keys(newData).map(function (item) {\n      if (!newData[item] && newData[item] !== 0) delete newData[item];\n    });\n\n    result.body = _JSON$stringify(newData);\n  }\n\n  if (formData) {\n    defaultHeader = null;\n    result.body = formData;\n  }\n\n  result.headers = _objectSpread({}, defaultHeader, {}, headers);\n  return {\n    url: link,\n    body: _objectSpread({}, result)\n  };\n};\n\nvar fetchPromise =\n/*#__PURE__*/\nfunction () {\n  var _ref2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(_ref) {\n    var url, body;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            url = _ref.url, body = _ref.body;\n            return _context.abrupt(\"return\", fetch(url, body).then(function (res) {\n              return res.json();\n            }).then(codeStatus));\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function fetchPromise(_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nvar request =\n/*#__PURE__*/\nfunction () {\n  var _ref3 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2(url, option, method) {\n    var result;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            result = urlInit(url, option, method);\n            return _context2.abrupt(\"return\", fetchPromise(result));\n\n          case 2:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function request(_x2, _x3, _x4) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nexport default request;","map":null,"metadata":{},"sourceType":"module"}