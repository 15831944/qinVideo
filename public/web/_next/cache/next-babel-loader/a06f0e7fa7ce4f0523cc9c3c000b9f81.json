{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { stringify } from \"qs\";\nimport fetch from \"isomorphic-unfetch\";\n/**\n * Requests a URL, returning a promise.\n *\n * @param  {string} url       The URL we want to request\n * @param  {object} [option] The options we want to pass to \"fetch\"\n * @return {object}           An object containing either \"data\" or \"err\"\n */\n\nconst codeStatus = res => {\n  if (res.code === 10000) {\n    return res.data;\n  }\n\n  return false;\n};\n\nconst urlInit = (url, options, method) => {\n  let link = url;\n  const result = {\n    method\n  };\n  let defaultHeader = {\n    Accept: \"application/json\",\n    \"Content-Type\": \"application/json; charset=utf-8\"\n  };\n  const {\n    params,\n    query,\n    data,\n    formData,\n    headers\n  } = options;\n  /* eslint-disable*/\n\n  if (params) {\n    _Object$keys(params).map(item => {\n      if (!params[item] && params[item] !== 0) delete params[item];\n    });\n\n    link = link.replace(/\\/:(\\w+)/gm, index => `/${params[`${index.replace(/\\/:/g, \"\")}`]}`);\n  }\n\n  if (query) {\n    _Object$keys(query).map(item => {\n      if (!query[item] && query[item] !== 0) delete query[item];\n    });\n\n    link += `?${stringify(query)}`;\n  }\n\n  if (data) {\n    const newData = data;\n\n    _Object$keys(newData).map(item => {\n      if (!newData[item] && newData[item] !== 0) delete newData[item];\n    });\n\n    result.body = _JSON$stringify(newData);\n  }\n\n  if (formData) {\n    defaultHeader = null;\n    result.body = formData;\n  }\n\n  result.headers = _objectSpread({}, defaultHeader, {}, headers);\n  return {\n    url: link,\n    body: _objectSpread({}, result)\n  };\n};\n\nconst fetchPromise = async ({\n  url,\n  body\n}) => {\n  return fetch(url, body).then(res => res.json()).then(codeStatus);\n};\n\nconst request = async (url, option, method) => {\n  const result = urlInit(url, option, method);\n  return fetchPromise(result);\n};\n\nexport default request;","map":null,"metadata":{},"sourceType":"module"}